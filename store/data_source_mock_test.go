// Code generated by MockGen. DO NOT EDIT.
// Source: ./store/data_source.go
//
// Generated by this command:
//
//	mockgen -source=./store/data_source.go -destination=./store/data_source_mock_test.go -package=store
//

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDataSource is a mock of DataSource interface.
type MockDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceMockRecorder
	isgomock struct{}
}

// MockDataSourceMockRecorder is the mock recorder for MockDataSource.
type MockDataSourceMockRecorder struct {
	mock *MockDataSource
}

// NewMockDataSource creates a new mock instance.
func NewMockDataSource(ctrl *gomock.Controller) *MockDataSource {
	mock := &MockDataSource{ctrl: ctrl}
	mock.recorder = &MockDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSource) EXPECT() *MockDataSourceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDataSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDataSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataSource)(nil).Close))
}

// GetPortalApps mocks base method.
func (m *MockDataSource) GetPortalApps() (map[PortalAppID]*PortalApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortalApps")
	ret0, _ := ret[0].(map[PortalAppID]*PortalApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortalApps indicates an expected call of GetPortalApps.
func (mr *MockDataSourceMockRecorder) GetPortalApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortalApps", reflect.TypeOf((*MockDataSource)(nil).GetPortalApps))
}
