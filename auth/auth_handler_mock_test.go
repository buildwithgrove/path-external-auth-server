// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth/auth_handler.go
//
// Generated by this command:
//
//	mockgen -source=./auth/auth_handler.go -destination=./auth/auth_handler_mock_test.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	store "github.com/buildwithgrove/path-external-auth-server/store"
	gomock "go.uber.org/mock/gomock"
)

// MockportalAppStore is a mock of portalAppStore interface.
type MockportalAppStore struct {
	ctrl     *gomock.Controller
	recorder *MockportalAppStoreMockRecorder
	isgomock struct{}
}

// MockportalAppStoreMockRecorder is the mock recorder for MockportalAppStore.
type MockportalAppStoreMockRecorder struct {
	mock *MockportalAppStore
}

// NewMockportalAppStore creates a new mock instance.
func NewMockportalAppStore(ctrl *gomock.Controller) *MockportalAppStore {
	mock := &MockportalAppStore{ctrl: ctrl}
	mock.recorder = &MockportalAppStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockportalAppStore) EXPECT() *MockportalAppStoreMockRecorder {
	return m.recorder
}

// GetPortalApp mocks base method.
func (m *MockportalAppStore) GetPortalApp(portalAppID store.PortalAppID) (*store.PortalApp, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortalApp", portalAppID)
	ret0, _ := ret[0].(*store.PortalApp)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPortalApp indicates an expected call of GetPortalApp.
func (mr *MockportalAppStoreMockRecorder) GetPortalApp(portalAppID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortalApp", reflect.TypeOf((*MockportalAppStore)(nil).GetPortalApp), portalAppID)
}

// MockrateLimitStore is a mock of rateLimitStore interface.
type MockrateLimitStore struct {
	ctrl     *gomock.Controller
	recorder *MockrateLimitStoreMockRecorder
	isgomock struct{}
}

// MockrateLimitStoreMockRecorder is the mock recorder for MockrateLimitStore.
type MockrateLimitStoreMockRecorder struct {
	mock *MockrateLimitStore
}

// NewMockrateLimitStore creates a new mock instance.
func NewMockrateLimitStore(ctrl *gomock.Controller) *MockrateLimitStore {
	mock := &MockrateLimitStore{ctrl: ctrl}
	mock.recorder = &MockrateLimitStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrateLimitStore) EXPECT() *MockrateLimitStoreMockRecorder {
	return m.recorder
}

// IsAccountRateLimited mocks base method.
func (m *MockrateLimitStore) IsAccountRateLimited(accountID store.AccountID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccountRateLimited", accountID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAccountRateLimited indicates an expected call of IsAccountRateLimited.
func (mr *MockrateLimitStoreMockRecorder) IsAccountRateLimited(accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccountRateLimited", reflect.TypeOf((*MockrateLimitStore)(nil).IsAccountRateLimited), accountID)
}
