// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildwithgrove/path-external-auth-server/auth (interfaces: PortalAppStore)
//
// Generated by this command:
//
//	mockgen -source=./auth/auth_handler.go -destination=./auth/portal_app_store_mock_test.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	store "github.com/buildwithgrove/path-external-auth-server/portal_app_store"
	gomock "go.uber.org/mock/gomock"
)

// MockPortalAppStore is a mock of PortalAppStore interface.
type MockPortalAppStore struct {
	ctrl     *gomock.Controller
	recorder *MockPortalAppStoreMockRecorder
}

// MockPortalAppStoreMockRecorder is the mock recorder for MockPortalAppStore.
type MockPortalAppStoreMockRecorder struct {
	mock *MockPortalAppStore
}

// NewMockPortalAppStore creates a new mock instance.
func NewMockPortalAppStore(ctrl *gomock.Controller) *MockPortalAppStore {
	mock := &MockPortalAppStore{ctrl: ctrl}
	mock.recorder = &MockPortalAppStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortalAppStore) EXPECT() *MockPortalAppStoreMockRecorder {
	return m.recorder
}

// GetPortalApp mocks base method.
func (m *MockPortalAppStore) GetPortalApp(portalAppID store.PortalAppID) (*store.PortalApp, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortalApp", portalAppID)
	ret0, _ := ret[0].(*store.PortalApp)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPortalApp indicates an expected call of GetPortalApp.
func (mr *MockPortalAppStoreMockRecorder) GetPortalApp(portalAppID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortalApp", reflect.TypeOf((*MockPortalAppStore)(nil).GetPortalApp), portalAppID)
}
