// Code generated by MockGen. DO NOT EDIT.
// Source: ./ratelimit/ratelimit_store.go
//
// Generated by this command:
//
//	mockgen -source=./ratelimit/ratelimit_store.go -destination=./ratelimit/ratelimit_store_mock_test.go -package=ratelimit
//

// Package ratelimit is a generated GoMock package.
package ratelimit

import (
	context "context"
	reflect "reflect"

	store "github.com/buildwithgrove/path-external-auth-server/store"
	gomock "go.uber.org/mock/gomock"
)

// MockaccountPortalAppStore is a mock of accountPortalAppStore interface.
type MockaccountPortalAppStore struct {
	ctrl     *gomock.Controller
	recorder *MockaccountPortalAppStoreMockRecorder
	isgomock struct{}
}

// MockaccountPortalAppStoreMockRecorder is the mock recorder for MockaccountPortalAppStore.
type MockaccountPortalAppStoreMockRecorder struct {
	mock *MockaccountPortalAppStore
}

// NewMockaccountPortalAppStore creates a new mock instance.
func NewMockaccountPortalAppStore(ctrl *gomock.Controller) *MockaccountPortalAppStore {
	mock := &MockaccountPortalAppStore{ctrl: ctrl}
	mock.recorder = &MockaccountPortalAppStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountPortalAppStore) EXPECT() *MockaccountPortalAppStoreMockRecorder {
	return m.recorder
}

// GetAccountPortalApp mocks base method.
func (m *MockaccountPortalAppStore) GetAccountPortalApp(accountID store.AccountID) (*store.PortalApp, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountPortalApp", accountID)
	ret0, _ := ret[0].(*store.PortalApp)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetAccountPortalApp indicates an expected call of GetAccountPortalApp.
func (mr *MockaccountPortalAppStoreMockRecorder) GetAccountPortalApp(accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountPortalApp", reflect.TypeOf((*MockaccountPortalAppStore)(nil).GetAccountPortalApp), accountID)
}

// MockdataWarehouseDriver is a mock of dataWarehouseDriver interface.
type MockdataWarehouseDriver struct {
	ctrl     *gomock.Controller
	recorder *MockdataWarehouseDriverMockRecorder
	isgomock struct{}
}

// MockdataWarehouseDriverMockRecorder is the mock recorder for MockdataWarehouseDriver.
type MockdataWarehouseDriverMockRecorder struct {
	mock *MockdataWarehouseDriver
}

// NewMockdataWarehouseDriver creates a new mock instance.
func NewMockdataWarehouseDriver(ctrl *gomock.Controller) *MockdataWarehouseDriver {
	mock := &MockdataWarehouseDriver{ctrl: ctrl}
	mock.recorder = &MockdataWarehouseDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdataWarehouseDriver) EXPECT() *MockdataWarehouseDriverMockRecorder {
	return m.recorder
}

// GetMonthToMomentUsage mocks base method.
func (m *MockdataWarehouseDriver) GetMonthToMomentUsage(ctx context.Context, minRelayThreshold int64) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthToMomentUsage", ctx, minRelayThreshold)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthToMomentUsage indicates an expected call of GetMonthToMomentUsage.
func (mr *MockdataWarehouseDriverMockRecorder) GetMonthToMomentUsage(ctx, minRelayThreshold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthToMomentUsage", reflect.TypeOf((*MockdataWarehouseDriver)(nil).GetMonthToMomentUsage), ctx, minRelayThreshold)
}
