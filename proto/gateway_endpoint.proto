// To generate Go code from this proto file, run:
// `make proto_generate`
//
// This executes:
// `protoc --go_out=./envoy/auth_server/proto --go-grpc_out=./envoy/auth_server/proto envoy/auth_server/proto/gateway_endpoint.proto`

syntax = "proto3";

package proto;

// Go package options for generated code:
// - `.`: Output autogenerated code to the current directory
// - `;proto`: Autogenerated code will be in the proto package
// - See: https://protobuf.dev/reference/go/go-generated/#package
option go_package = ".;proto";

// GatewayEndpoints service provides a gRPC interface for the Auth Server to interact with the remote gRPC server.
service GatewayEndpoints {
  // FetchAuthDataSync requests the initial set of GatewayEndpoints from the remote gRPC server.
  rpc FetchAuthDataSync(AuthDataRequest) returns (AuthDataResponse);

  // StreamAuthDataUpdates listens for updates from the remote gRPC server and streams them to the client.
  rpc StreamAuthDataUpdates(AuthDataUpdatesRequest) returns (stream AuthDataUpdate);
}

message AuthDataRequest {}

// AuthDataResponse
// - Sent from the remote gRPC server to the Auth Server
// - Contains the full current set of GatewayEndpoints from the remote gRPC server's data source.
message AuthDataResponse {
  map<string, GatewayEndpoint> endpoints = 1;
}

message AuthDataUpdatesRequest {}

// AuthDataUpdate contains the data from the remote gRPC server when a GatewayEndpoint is created, updated, or deleted.
message AuthDataUpdate {
  // endpoint_id:
  // - Unique identifier for a user account's GatewayEndpoint
  // - Used to identify the GatewayEndpoint when making a service request
  // - Must be passed as the last path segment of the service request URL
  //   Example: POST https://api.path.xyz/v1/{gateway_endpoint_id}
  string endpoint_id = 1;

  // gateway_endpoint:
  // - The GatewayEndpoint to upsert to the database
  // - If delete is true, this field should be empty and the associated endpoint_id will be deleted
  GatewayEndpoint gateway_endpoint = 2;

  // delete indicates whether the GatewayEndpoint should be deleted
  bool delete = 3;
}

// GatewayEndpoint
// - Represents a user account's endpoint
// - Two primary functions:
//   1. Identifies which endpoint is being used to make a service request
//   2. Allows configuration of endpoint-specific settings (e.g., API key authorization)
// - Associated to a single UserAccount
// - A single UserAccount can have multiple GatewayEndpoints
// - Service request settings (like API key enforcement) are configured per GatewayEndpoint
message GatewayEndpoint {
  // endpoint_id
  // - Unique identifier for a UserAccount's endpoint
  // - Must be passed as the last path segment of the service request URL (e.g., `/v1/{endpoint_id}`)
  // - Used to identify the GatewayEndpoint when making a service request
  string endpoint_id = 1;

  // auth authorization settings for the GatewayEndpoint
  Auth auth = 2;

  // metadata optional metadata for the GatewayEndpoint
  Metadata metadata = 3;
}

// Auth authorization settings for a GatewayEndpoint.
message Auth {
  oneof auth_type {
    // no_auth indicates that the GatewayEndpoint does not require authorization.
    NoAuth no_auth = 1;

    // static_api_key indicates that the GatewayEndpoint uses a static API key for authorization.
    StaticAPIKey static_api_key = 2;
  }
}

// NoAuth
// - Indicates that the GatewayEndpoint does not require authorization
// - Simply an empty field, named explicitly to avoid confusion with the `Empty` message.
message NoAuth {}

message StaticAPIKey {
  // api_key the API key to use for authorization
  string api_key = 1;
}

// Metadata metadata for a GatewayEndpoint
// - Fields are not required for technical tasks related to Envoy Auth implementation
// - Intended for billing, metrics, and other purposes
// - All fields are optional and may be left blank if not applicable
message Metadata {
  // the name of the GatewayEndpoint
  string name = 1;

  // unique identifier for the user's account
  string account_id = 2;

  // identifier for a specific user within the system
  string user_id = 3;

  // subscription or account plan type (e.g., "Free", "Pro", "Enterprise")
  string plan_type = 4;

  // OPTIONAL: User-set value limiting the number of relays a user can make in a month
  int32 monthly_relay_limit = 5;

  // the email address associated with the GatewayEndpoint
  string email = 6;

  // the environment the GatewayEndpoint is in (e.g., "development", "staging", "production")
  string environment = 7;
}

// empty used to indicate that a field is not set

