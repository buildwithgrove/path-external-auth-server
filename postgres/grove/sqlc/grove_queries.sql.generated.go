// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: grove_queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const selectPortalApps = `-- name: SelectPortalApps :many

SELECT 
    pa.id,
    pas.secret_key,
    pas.secret_key_required,
    pa.account_id,
    a.plan_type AS plan,
    a.monthly_user_limit
FROM portal_applications pa
LEFT JOIN portal_application_settings pas
    ON pa.id = pas.application_id
LEFT JOIN accounts a 
    ON pa.account_id = a.id
WHERE pa.deleted = false
GROUP BY 
    pa.id,
    pas.secret_key,
    pas.secret_key_required,
    a.plan_type,
    a.monthly_user_limit
`

type SelectPortalAppsRow struct {
	ID                string      `json:"id"`
	SecretKey         pgtype.Text `json:"secret_key"`
	SecretKeyRequired pgtype.Bool `json:"secret_key_required"`
	AccountID         pgtype.Text `json:"account_id"`
	Plan              pgtype.Text `json:"plan"`
	MonthlyUserLimit  pgtype.Int4 `json:"monthly_user_limit"`
}

// This file is used by SQLC to autogenerate the Go code needed by the database driver.
// It contains all queries used for fetching user data by the Gateway.
// See: https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html#schema-and-queries
func (q *Queries) SelectPortalApps(ctx context.Context) ([]SelectPortalAppsRow, error) {
	rows, err := q.db.Query(ctx, selectPortalApps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectPortalAppsRow
	for rows.Next() {
		var i SelectPortalAppsRow
		if err := rows.Scan(
			&i.ID,
			&i.SecretKey,
			&i.SecretKeyRequired,
			&i.AccountID,
			&i.Plan,
			&i.MonthlyUserLimit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
